/*! This style sheet was autogenerated using gulp + scss
 *  For usage instructions, see: https://github.com/openemr/openemr/blob/master/interface/README.md
 */
#encounters{width:100%}#encounters .billing_note{width:25%}#encounters .billing_note_text{background-color:var(--gray300);border:2px outset var(--black);padding:5px}#encounters .billing_note_text_highlight{background-color:#f7f5d1}#encounters table{border-collapse:collapse;width:100%}#encounters tr{cursor:pointer}#encounters th{text-align:right}#encounters #tooltipdiv{font-size:.75rem;background-color:#ffa;border:1px solid var(--black);padding:2px;position:absolute;visibility:hidden;width:500px;z-index:1000}#encounters .highlight{background-color:var(--white)}#encounters .tooltip{background:#f7f5d1;border:1px solid var(--gray800);color:var(--gray800);display:none;padding:2px 5px;position:absolute}#encounters>table>*>tr>td{border-top:1px solid var(--black);vertical-align:top}@media print{div.encreport td{font-size:8pt!important}}div.encreport td{font-size:.6875rem;vertical-align:top}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
